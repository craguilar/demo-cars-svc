swagger: "2.0"
info:
  title: Cars demo
  description: |
    CMesh API User Profile, previously known as user resume.
  version: "20200201"
  contact:
    email: "caruizag@gmail.com"
host: "localhost:8080"
basePath: "/20200201"

schemes:
- "http"
produces:
- application/json
paths:
  /cars/{carId}:
    get:
      tags:
      - "cars"
      summary: Get user details per user Id
      description: |
        Get user details per user id 
      operationId: "GetCar"
      parameters:
      - $ref: '#/parameters/RequestFields'
      - in: path
        name: carId
        type: string
        required: true
      responses:
        200:
          description: |
            Successful operation
          schema:
            $ref: "#/definitions/Car"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
  
  /cars:
    get:
      tags:
      - "cars"
      summary: Get user details per user Id
      description: |
        Get user details per user id 
      operationId: "ListCars"
      parameters:
      - $ref: '#/parameters/RequestFields'
      - $ref: '#/parameters/PaginationLimitQueryParam'
      - $ref: '#/parameters/PaginationTokenQueryParam'
      - $ref: '#/parameters/SortOrderQueryParam'
      - $ref: '#/parameters/SortByQueryParam'
      responses:
        200:
          description: |
            Successful operation
          schema:
            items:
              $ref: "#/definitions/CarSummary"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
    post:
      tags:
      - "cars"
      summary: Add a new Car
      description: |
      operationId: "AddCar"
      parameters:
      - in: "body"
        name: "body"
        description: "New car to add"
        required: true
        schema:
          $ref: "#/definitions/Car"
      responses:
        201:
          description: |
            Successful operation
          schema:
            $ref: "#/definitions/Car"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        409:
          $ref: '#/responses/409'
        500:
          $ref: '#/responses/500'
    put:
      tags:
      - "cars"
      summary: Update car
      description: |
      operationId: "UpdateCar"
      parameters:
      - in: "body"
        name: "body"
        description: "Car to update"
        required: true
        schema:
          $ref: "#/definitions/Car"
      responses:
        201:
          description: |
            Successful operation
          schema:
            $ref: "#/definitions/Car"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'

definitions:
  
  CarSummary:
    type: object
    description: |
      Main car object .
    required:
      - plate
      - make
      - model
    properties:
      plate:
        type : string
        description: |
          Car plate
      make:
        type: string
      model:
        type: string
      description:
        type: string
      typeOfUse:
        type : string

  Car:
    type: object
    description: |
      Main car object .
    required:
      - plate
      - make
      - model
    properties:
      plate:
        type : string
        description: |
          Car plate
      make:
        type: string
      model:
        type: string
      description:
        type: string
      typeOfUse:
        type : string
      nationalKey:
        type: string
      serialNumber:
        type: string
      engineSerialNumber:
        type: string
      comparny :
        type: string
      timeCreated:
        type: string
        format:  date-time
      timeUpdated:
        type: string
        format:  date-time
      images:
        type: array
        items:
          $ref: "#/definitions/Image"

  Image:
    type: object
    description : Object that holds an image definition
    required:
      - name
      - content
    properties:
      name:
        type: string
      content:
        type: file


  Error:
    type: object
    description: Internal error object model.
    required:
    - code
    - message
    properties:
      code:
        type: string
        description: A short error code that defines the error, meant for programmatic parsing.
      message:
        type: string
        description: A human-readable error string.
        
      
parameters:

  RequestFields:
    name: fields
    in: query
    type: array
    collectionFormat: multi
    description : |
      Partial response refers to an optimization technique offered
      by the RESTful web APIs to return only the information 
      (fields) required by the client. In this mechanism, the client
      sends the required field names as the query parameters for
      an API to the server, and the server trims down the default
      response content by removing the fields that are not required
      by the client. The parameter used to control what fields to
      return should be a query string parameter called "fields" of
      type array, provide the values as enums, and usecollectionFormat
    items:
      type: string
    
  PaginationLimitQueryParam:
    description: |
      The maximum number of items to return in a paginated "List" call.
      Example: `500`
    in: query
    maximum: 1000
    minimum: 1
    name: limit
    type: integer
    
  PaginationTokenQueryParam:
    description: |
      The value of page to display.
    in: query
    maxLength: 512
    minLength: 1
    name: page
    type: string
    
  SortOrderQueryParam:
    description: |
      The sort order to use, either ascending (`ASC`) or descending (`DESC`). The DISPLAYNAME sort order
      is case sensitive.
    enum:
    - ASC
    - DESC
    in: query
    name: sortOrder
    required: false
    type: string
    
  SortByQueryParam:
    description: |
      The field to sort by. You can provide one sort order (`sortOrder`). Default order for
      TIMECREATED is descending. Default order for DISPLAYNAME is ascending. The DISPLAYNAME
      sort order is case sensitive.

      **Note:** In general, some "List" operations (for example, `ListInstances`) let you
      optionally filter by Availability Domain if the scope of the resource type is within a
      single Availability Domain. If you call one of these "List" operations without specifying
      an Availability Domain, the resources are grouped by Availability Domain, then sorted.
    in: query
    name: sortBy
    required: false
    type: string
    
responses:

  400:
    description: A bad request was made.
    schema:
      $ref: '#/definitions/Error'
      
  401:
    description: Unauthorized.
    schema:
      $ref: '#/definitions/Error'

  404:
    description: Not found.
    schema:
      $ref: '#/definitions/Error'
      
  409:
    description: Conflict with resource.
    schema:
      $ref: '#/definitions/Error'
      
  429:
    description: Too Many Requests
    schema:
      $ref: '#/definitions/Error'

  500:
    description: Internal server error.
    schema:
      $ref: '#/definitions/Error'

  default:
    description: Unknown Error
    schema:
      $ref: '#/definitions/Error'